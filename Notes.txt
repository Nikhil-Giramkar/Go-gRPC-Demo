In a REST or GraphQL architecture we have
    Client sending request
    Server giving response
But this process is
    Slow
    Synchronous
    Not Scalable
--------------------------------------------------------
How to make the client server intercation Scalable?

For that we use Remote Procedure Calls (RPC)

RPC directly calls functions from client to server
Instead of JSON, we use protobuf files
Here, payload size is small and accelerates communication

Client Server communication can happen via Streaming (sequences of mesages)
Stream is continous flow of data
Its asynchronous
Extremely scalable
Usecase: MICROSERVICES!, Blockchains
--------------------------------------------------------

There are mainly 4 types of communications in GRPC

1. Unary API
    Regular request-response

2. Server Streaming
    Client sends a request to server
    Server sends a strea of data to client 

3. Client Streaming
    Client sends a stream of data to server
    Server provides a siple response to client

4. Bi-Directional Streaming
    Both client and server can communicate via streaming.
    And they can do this parallely, 
    Not like request response wehre client sneds first and then server gives response - not like this.
    Its like a two way-traffic
    Even though its a stream, not a queue, sequence of messages is preserved

--------------------------------------------------------

Start Coding....

First of all
    go mod init github.com/Nikhil-Giramkar/Go-gRPC-Demo

Create seperate folders For
    Client
    Server
    Proto
Client and server will have seperate main.go

Proto will have greet.proto file
All RPC calls will be defined in greet.proto file.

But the actual code required for interaction between client and server will be in 
something called as "pb.go" and "greet_grpc.go" file
Those files will be utomatically generated for us

Use extension: vscode-proto3 to see colours in proto file


Install proto Compiler : https://www.youtube.com/watch?v=ES_GI-lmhEU
Check version via: protoc --version

Now run following command in Terminal
    protoc --go_out=. --go-grpc_out=. proto/greet.proto
As you hit enter,
    we get 2 files: greet.pb.go
                    greet_grpc.pb.go
--------------------------------------------------------

start server, then client
     go run .

----------------------------------------------------
We can test each gRPC end point on Postman
Guide: https://www.youtube.com/watch?v=yluYiCj71ss

We can also debug line by line, whenever an endpoint is hit.
Using vs code debugger.

Run the program in debug mode.
Add breakpoint inside the gRPC function.

Go to postman and send a sample message.
Breakpoint is hit and we can debug it line by line.
Once function is over, we see response in PostMan output screen.
-----------------------------------------------------------